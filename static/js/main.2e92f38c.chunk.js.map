{"version":3,"sources":["Table.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["TableHeader","style","backgroundColor","TableBody","props","charData","removeCharacter","rows","map","data","index","key","name","job","onClick","Table","Form","handleChange","event","target","value","setState","submitForm","addCharacter","state","resetData","namePlaceHolder","jobPlaceHolder","this","htmlFor","type","placeholder","id","onChange","React","Component","App","varForJSX","simpleJSX","char","characters","filter","idx","console","log","className","length","color","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2e92f38c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n// Functional component example\r\nconst TableHeader = () => {\r\n  return (\r\n    <thead>\r\n      <tr style={{ backgroundColor: 'lightblue' }}>\r\n        <th>Name</th>\r\n        <th>Job</th>\r\n      </tr>\r\n    </thead>\r\n  );\r\n};\r\n\r\n// Functional component example\r\nconst TableBody = (props) => {\r\n  const { charData, removeCharacter } = props;\r\n\r\n  // Mapping over the charData to put make table row out of it.\r\n  const rows = charData.map((data, index) => (\r\n    <tr\r\n      key={index}\r\n      style={{ backgroundColor: index % 2 === 0 ? 'lightGrey' : 'white' }} // Conditional styling\r\n    >\r\n      <th>{data.name}</th>\r\n      <th>{data.job}</th>\r\n      <th style={{ backgroundColor: '#eafaf1' }}>\r\n        <button onClick={() => removeCharacter(index)}>Delete</button>\r\n      </th>\r\n    </tr>\r\n  ));\r\n  return <tbody>{rows}</tbody>;\r\n};\r\n\r\n// Functional component example\r\nconst Table = (props) => {\r\n  const { charData, removeCharacter } = props;\r\n\r\n  return (\r\n    <table>\r\n      <TableHeader />\r\n      {/* Passing props further down to child component */}\r\n      <TableBody charData={charData} removeCharacter={removeCharacter} />\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","import React from 'react';\r\n\r\n// Class component example\r\nclass Form extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      // State variable to hold the \"current state of this component\"\r\n      name: '',\r\n      job: '',\r\n    };\r\n  }\r\n\r\n  // function gets called on any input chnage in the input fields\r\n  handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n    // Changing state of this component by using setState\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  // function getting called on submit button click\r\n  submitForm = () => {\r\n    const { addCharacter } = this.props;\r\n    const { name, job } = this.state;\r\n    // A simple validation example before submitting the data\r\n    if (name && job) {\r\n      // checking whether there is data in name and job?\r\n      // calling Grand Parent(App.js) function to change it's state: which will reflec change in App and Table\r\n      addCharacter(this.state);\r\n      this.resetData();\r\n    } else {\r\n      this.setState({\r\n        namePlaceHolder: name ? null : 'Please Enter Name...',\r\n        jobPlaceHolder: job ? null : 'Please Enter Job...',\r\n      });\r\n    }\r\n  };\r\n\r\n  // function called to reset data\r\n  resetData = () => {\r\n    this.setState({\r\n      name: '',\r\n      job: '',\r\n      namePlaceHolder: null,\r\n      jobPlaceHolder: null,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { name, job, namePlaceHolder, jobPlaceHolder } = this.state;\r\n\r\n    return (\r\n      <form>\r\n        <label htmlFor='name'>Name</label>\r\n        <input\r\n          type='text'\r\n          name='name'\r\n          placeholder={namePlaceHolder}\r\n          id='name'\r\n          value={name}\r\n          onChange={this.handleChange}\r\n        />\r\n        <label htmlFor='job'>Job</label>\r\n        <input\r\n          type='text'\r\n          placeholder={jobPlaceHolder}\r\n          name='job'\r\n          id='job'\r\n          value={job}\r\n          onChange={this.handleChange}\r\n        />\r\n        <input type='button' value='Submit' onClick={this.submitForm} />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","import React from 'react';\nimport './App.css';\nimport Table from './Table';\nimport Form from './Form';\n\n// Class component example\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      characters: [],\n    };\n  }\n\n  // To understand JSX: use of variable is also shown\n  varForJSX = 'I am getting passed to JSX';\n  simpleJSX = (\n    <h7>\n      {' '}\n      This is simple JSX with one js variable 'name' : {this.varForJSX} --->\n      Data from var\n    </h7>\n  );\n\n  addCharacter = (char) => {\n    const { characters } = this.state;\n    this.setState({ characters: [...characters, char] });\n  };\n\n  removeCharacter = (index) => {\n    const { characters } = this.state;\n    this.setState({\n      characters: characters.filter((char, idx) => idx !== index),\n    });\n    console.log(characters);\n  };\n\n  render() {\n    const { characters } = this.state;\n\n    return (\n      <div className='container'>\n        <h1>Let's Build Basic React App!</h1>\n        <h5>\n          We will learn: JSX, Props, State, Class and Functional Component,\n          Child Component, Communication between components, conditional\n          rendering, inline styling\n        </h5>\n        ===================================================================================================================\n        <br /> {/* We can use HTML tags too */}\n        Below line is rendering a simple JSX:\n        <br />\n        {this.simpleJSX} {/* Using simple JSX  declared above */}\n        ===================================================================================================================\n        <h5>\n          Will show table of Users below:{' '}\n          {characters && characters.length /* conditional rendering */ ? (\n            /* communication between componets using props: charData is being passed to Table */\n            <Table\n              charData={characters}\n              removeCharacter={this.removeCharacter}\n            />\n          ) : (\n            <span style={{ color: '#F5B7B1' }}>\n              No User Data entered yet! Enter Name and Job to see the data in\n              the Table.\n            </span>\n          )}\n        </h5>\n        ===================================================================================================================\n        <h5>Here is the form to enter user details:</h5>\n        {/* communication between componets using props: addCharacter is being passed to Form(Child), where on invoking \n          it will add character to character state variable of this App component(Parent) */}\n        <Form addCharacter={(char) => this.addCharacter(char)} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('BasicApp')); // This id is same as div id in index.html inside Public folder\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}